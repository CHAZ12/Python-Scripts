import requests
connected = False
#url2 = "http://198.18.34.1/reg.php"
url = "https://express.tntech.edu/index.php"
try:
    r = requests.get(url, timeout = 3)
    connected = True
except requests.exceptions.Timeout:
    print("The request timed out")

headers = {
        "cache-Control": "max-age=0",
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "en-US,en;q=0.9",
        "content-type": "application/x-www-form-urlencoded",
        "connection": "keep-alive",
        "Server":"Apache",
        #"transfer-encoding": "chunked",
       # "x-frame-options": "sameorigin",
        "Host": "https://sso.tntech.edu",
        "origin":"https://sso.tntech.edu",
        "referer": "application/x-www-form-urlencoded",
        "upgrade-insecure-requests": "1",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
        
        }

payload = { "SAMLResponse":""
           }
  
if connected:
    try:
        p = requests.post(url, data = payload)
        connected = True
        print(p)
    except:
        print("no request")
        
        